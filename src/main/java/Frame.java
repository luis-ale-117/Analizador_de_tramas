
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PcapDumper;
import org.pcap4j.core.PcapNativeException;

/*
    Frame
    GUI DEL PROGRAMA
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        interfazSelec = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        opciones = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        tiempoSpin = new javax.swing.JSpinner(new SpinnerNumberModel(5,0,3600,1));
        jLabel3 = new javax.swing.JLabel();
        cantidadSpin = new javax.swing.JSpinner(new SpinnerNumberModel(1,0,20000,1));
        inicioPausa = new javax.swing.JToggleButton();
        estatus = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        scrollAnalisis = new javax.swing.JScrollPane();
        analisis = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jBaraComun = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        abrirArchivo = new javax.swing.JMenuItem();
        cerrarArchivo = new javax.swing.JMenuItem();
        guardaCap = new javax.swing.JMenuItem();
        view = new javax.swing.JMenu();
        estadistica = new javax.swing.JMenuItem();
        aboutUs = new javax.swing.JMenu();
        equipo = new javax.swing.JMenuItem();
        info = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Super Sniffer osi osi");
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(800, 500));

        jPanel1.setLayout(null);
        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setBackground(new java.awt.Color(153, 153, 255));
        jLabel1.setText("Paquetes Capturados");
        jLabel1.setOpaque(true);

        jToolBar1.setBackground(new java.awt.Color(204, 255, 255));
        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jToolBar1.setMinimumSize(new java.awt.Dimension(760, 50));
        jToolBar1.setPreferredSize(new java.awt.Dimension(760, 50));

        interfazSelec.setBackground(new java.awt.Color(255, 204, 204));
        interfazSelec.setText("Interfaz");
        interfazSelec.setFocusable(false);
        interfazSelec.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        interfazSelec.setMaximumSize(new java.awt.Dimension(50, 40));
        interfazSelec.setMinimumSize(new java.awt.Dimension(50, 40));
        interfazSelec.setPreferredSize(new java.awt.Dimension(50, 40));
        interfazSelec.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        interfazSelec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interfazSelecActionPerformed(evt);
            }
        });
        jToolBar1.add(interfazSelec);
        interfazSelec.setOpaque(true);

        jLabel2.setText("  Filtro:  ");
        jToolBar1.add(jLabel2);

        jTextField1.setPreferredSize(new java.awt.Dimension(200, 30));
        jToolBar1.add(jTextField1);

        opciones.setMaximumRowCount(3);
        opciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cantidad", "Tiempo", "Sin limite" }));
        opciones.setEnabled(false);
        opciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionesActionPerformed(evt);
            }
        });
        jToolBar1.add(opciones);

        jLabel4.setText("  Tiempo (s)  ");
        jToolBar1.add(jLabel4);

        tiempoSpin.setEnabled(false);
        tiempoSpin.setPreferredSize(new java.awt.Dimension(100, 30));
        jToolBar1.add(tiempoSpin);

        jLabel3.setText("  No.Captura  ");
        jToolBar1.add(jLabel3);

        cantidadSpin.setEnabled(false);
        cantidadSpin.setMinimumSize(new java.awt.Dimension(50, 20));
        cantidadSpin.setPreferredSize(new java.awt.Dimension(100, 30));
        jToolBar1.add(cantidadSpin);

        inicioPausa.setBackground(new java.awt.Color(102, 255, 102));
        inicioPausa.setText("Inicia");
        inicioPausa.setEnabled(false);
        inicioPausa.setFocusable(false);
        inicioPausa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        inicioPausa.setMaximumSize(new java.awt.Dimension(50, 50));
        inicioPausa.setMinimumSize(new java.awt.Dimension(50, 40));
        inicioPausa.setOpaque(true);
        inicioPausa.setPreferredSize(new java.awt.Dimension(50, 40));
        inicioPausa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        inicioPausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioPausaActionPerformed(evt);
            }
        });
        jToolBar1.add(inicioPausa);

        jToolBar1.setOpaque(true);

        estatus.setBackground(new java.awt.Color(255, 153, 153));
        estatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        estatus.setText("Escuchando...");
        estatus.setEnabled(true);
        estatus.setOpaque(true);

        jTable1.setBackground(new java.awt.Color(255, 255, 153));
        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Mac Destino", "Mac Origen", "Tipo", "Tiempo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selecPaquete(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        analisis.setEditable(false);
        analisis.setBackground(new java.awt.Color(153, 255, 153));
        analisis.setColumns(20);
        analisis.setRows(5);
        analisis.setText("Analisis de paquetes...");
        scrollAnalisis.setViewportView(analisis);

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(255, 255, 204));
        jTextField2.setText("Archivo de captura abierto...");
        jTextField2.setEnabled(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollAnalisis)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(estatus, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(estatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollAnalisis, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        estatus.setVisible(false);

        file.setText("File");
        file.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        abrirArchivo.setText("Abrir Archivo");
        abrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFile(evt);
            }
        });
        file.add(abrirArchivo);

        cerrarArchivo.setText("Cerrar Archivo");
        cerrarArchivo.setEnabled(false);
        cerrarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarArchivoActionPerformed(evt);
            }
        });
        file.add(cerrarArchivo);

        guardaCap.setText("Guardar Captura");
        guardaCap.setEnabled(false);
        guardaCap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardaCapActionPerformed(evt);
            }
        });
        file.add(guardaCap);

        jBaraComun.add(file);

        view.setText("View");

        estadistica.setText("Estadísticas");
        estadistica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticaActionPerformed(evt);
            }
        });
        view.add(estadistica);

        jBaraComun.add(view);

        aboutUs.setText("About");

        equipo.setText("Equipo");
        equipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipoInfo(evt);
            }
        });
        aboutUs.add(equipo);

        info.setText("Info");
        info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoApp(evt);
            }
        });
        aboutUs.add(info);

        jBaraComun.add(aboutUs);

        setJMenuBar(jBaraComun);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    /***********************************************
     ***********************************************
     * 
        EVENTOS PARA LOS BOTONES, LA TABLA, ETC...
     * 
     ***********************************************
    ***********************************************/
    
    /*ABRE EL EXPLORADOR DE ARCHIVOS PARA ESCOGER UN .PCAP Y DESPLEGARLO EN LA TABLA*/
    private void OpenFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFile
        JFileChooser selectorArch = new JFileChooser();
        int respuesta = selectorArch.showOpenDialog(this);
        if(respuesta == JFileChooser.APPROVE_OPTION){
            jTextField2.setText(selectorArch.getSelectedFile().getAbsolutePath());
            jTextField2.setEnabled(true);
            try {
                /*Desactiva la opcion del sniffer hasta que se cierre el archivo*/
                inicioPausa.setEnabled(false);
                tiempoSpin.setEnabled(false);
                cantidadSpin.setEnabled(false);
                opciones.setEnabled(false);
                /*Borra contenido de la tabla*/
                DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                model.setRowCount(0);
                /*Lee el archivo y agrega su contenido a la tabla*/
                read.leerArchivo(jTable1,jTextField2.getText());
                /*Asigna los paquetes del read como los principales*/
                paquetesPrincipales = read.getPaquetes();//Apunta a los paquetes del read
                sniffer.clearArrayPaquetes();
                
            } catch (PcapNativeException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NotOpenException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            cerrarArchivo.setEnabled(true);
            guardaCap.setEnabled(false);
        }   
        
    }//GEN-LAST:event_OpenFile
    
    /*MUESTRA TODOS LOS INTEGRANTES DEL EQUIPO*/
    private void equipoInfo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipoInfo
        JOptionPane.showMessageDialog(this,
            "Equipo:\n- Yo\n- Uriel\n- Jose\n- David",
            "Info del equipo",
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_equipoInfo
    
    /*GUARDA LOS PAQUETES CAPTURADOS DE LA TABLA EN UN ARCHIVO .PCAP*/
    private void guardaCapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardaCapActionPerformed
        JFileChooser selectorArch = new JFileChooser();
        int respuesta = selectorArch.showSaveDialog(this);
        /*Falta chechar que no se este escuchando al momento de guardar*/
        if(respuesta == JFileChooser.APPROVE_OPTION){
            PcapDumper dumper = null;
            dumper = sniffer.createDumper(selectorArch.getSelectedFile().getAbsolutePath());
            if(dumper == null){
                JOptionPane.showMessageDialog(this,
                "Ocurrió un error al guardar el archivo",
                "Guardado fallido",
                JOptionPane.ERROR_MESSAGE);
            }else{
                for(Paquete pack: paquetesPrincipales){
                    try {
                        dumper.dumpRaw(pack.returnTrama());
                    } catch (NotOpenException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                dumper.close();
                JOptionPane.showMessageDialog(this,
                "El archivo se guardo correctamente :)",
                "¡Guardado exitoso!",
                JOptionPane.INFORMATION_MESSAGE);
            }
            
            cerrarArchivo.setEnabled(false);
            guardaCap.setEnabled(true);
        }
    }//GEN-LAST:event_guardaCapActionPerformed
    
    /*DESPLIEGA LAS OPCIONES DE CAPTURA DE PAQUETES*/
    private void opcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionesActionPerformed
        /*Borra --Opciones-- cuando no se necesita*/
        //if((String)opciones.getItemAt(0)=="--Opciones--")
        //        opciones.removeItemAt(0);
        
        if((String)opciones.getSelectedItem()=="Tiempo"){
            inicioPausa.setEnabled(true);
            tiempoSpin.setEnabled(true);
            cantidadSpin.setEnabled(false);            
        }
        else if((String)opciones.getSelectedItem()=="Cantidad"){
            inicioPausa.setEnabled(true);
            tiempoSpin.setEnabled(false);           
            cantidadSpin.setEnabled(true);            
        }
        /*Sin implementacion actualmente*/
        else if((String)opciones.getSelectedItem()=="Sin limite"){
            inicioPausa.setEnabled(false);
            tiempoSpin.setEnabled(false);
            cantidadSpin.setEnabled(false);            
        }
        else{
            inicioPausa.setEnabled(false);
            tiempoSpin.setEnabled(false);
            cantidadSpin.setEnabled(false);
        }
    }//GEN-LAST:event_opcionesActionPerformed
    
    /*INICIA O PAUSA LA CAPTURA DE PAQUETES DE ACUERDO A LAS OPCIONES SELECCIONADAS*/
    private void inicioPausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioPausaActionPerformed
       
        if(inicioPausa.isSelected()){
            
            estatus.setVisible(true);
            estatus.setText("Escuchando...");
            estatus.setBackground(new java.awt.Color(102, 255, 102));//Verde
            
            inicioPausa.setText("Pausa");
            inicioPausa.setBackground(new java.awt.Color(255,153,153));//Rojo
            
            /*Inicializa las opciones para escuchar paquetes*/
            filtroPaquetes = jTextField1.getText();//Obtiene el filtro de la caja de texto         
            cantidadCapturar = (int)cantidadSpin.getValue();
            tiempoCapturar = (int)tiempoSpin.getValue();
            
            /*************************************/
            /*Comienza la captura de los paquetes*/
            /*************************************/
            try {
                sniffer.inicializafiltro(filtroPaquetes);
                /*Capruta paquetes SOLO SI el filtro es correcto*/
                try {                    
                    /*Captura los paquetes los muestra en la tabla*/
                    sniffer.escuchaPaquetes(jTable1,cantidadCapturar,tiempoCapturar,(String)opciones.getSelectedItem());
                    /*Asigna los paquetes del sniffer como los principales*/
                    paquetesPrincipales = sniffer.getPaquetes();//Apunta a los paquetes del sniffer
                } catch (PcapNativeException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);                
                } catch (NotOpenException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                cerrarArchivo.setEnabled(false);
                guardaCap.setEnabled(true);
            } catch (PcapNativeException ex) {
                /*Si el filtro es incorrecto*/
                estatus.setText("Finalizado");
                estatus.setBackground(new java.awt.Color(51,204,255));//Azul
                inicioPausa.setText("Inicia");
                inicioPausa.setBackground(new java.awt.Color(102, 255, 102));//Verde
                inicioPausa.setSelected(false);
                JOptionPane.showMessageDialog(this,
                "El filtro que colocaste es invalido\nPor favor, escoge otro.",
                "Filtro Incorrecto",
                JOptionPane.WARNING_MESSAGE);
            } catch (NotOpenException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }                        
        }
        else {
            estatus.setText("En pausa...");
            estatus.setBackground(new java.awt.Color(255,153,153));//Rojo
            inicioPausa.setText("Inicia");
            inicioPausa.setBackground(new java.awt.Color(102, 255, 102));//Verde
            /*Aqui se debria de detener la captura (Falta aplicarlo)*/
        }
    }//GEN-LAST:event_inicioPausaActionPerformed
      
    /*DEBE CERRAR UN ARCHIVO .PACP ABIERTO*/
    /*Si es seleccionado hasta ahora borraría todos los campos de la tabla (CORREGIR)*/
    private void cerrarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarArchivoActionPerformed
        /*Limpia la tabla y la etiqueta de archivo*/
        jTextField2.setText("");
        jTextField2.setEnabled(false);
        /*Borra contenido de la tabla*/
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);        
        jTextField2.setEnabled(false);
        /*Desactiva la opcion del sniffer hasta que se cierre el archivo*/
        inicioPausa.setEnabled(true);
        tiempoSpin.setEnabled(false);
        cantidadSpin.setEnabled(true);
        opciones.setEnabled(true);
        cerrarArchivo.setEnabled(false);
        guardaCap.setEnabled(false);
        read.clearArrayPaquetes();
        analisis.setText("Analisis de paquetes...");
    }//GEN-LAST:event_cerrarArchivoActionPerformed
    
    /*MUESTRA LA INFORMACION DEL ANALISIS DEL PAQUETE SELECIONADO EN LA TABLA*/    
    private void selecPaquete(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selecPaquete
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        int i = jTable1.getSelectedRow();                     
        analisis.setText(paquetesPrincipales.get(i).toString());
        
        
    }//GEN-LAST:event_selecPaquete
    
    /*INFO QUE SE QUIERA MOSTRAR DE LA APLICACION*/
    private void infoApp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoApp
        JOptionPane.showMessageDialog(this,
            "Informacion de la aplicación",
            "Sniffer que simula algunas características\nde WireShark",
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_infoApp
    
    /*ESCOGE LA INTERFAZ PARA CAPTURAR PAQUETES (por consola CORREGIR)*/
    private void interfazSelecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interfazSelecActionPerformed
        sniffer.setTable(jTable1);
        sniffer.setBotonInicio(inicioPausa);
        sniffer.setLabelEstatus(estatus);
        try {
            sniffer.selecInterfaz();
            cantidadSpin.setEnabled(true);
            opciones.setEnabled(true);
            inicioPausa.setEnabled(true);
        } catch (PcapNativeException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotOpenException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }               
        
    }//GEN-LAST:event_interfazSelecActionPerformed
    
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed
    
    /************  GENERA LAS ESTADÍSTICAS  *************/
    private void estadisticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticaActionPerformed
        int packTotales = paquetesPrincipales.size();
        
        int ieeeCant = 0;
        int ethernetCant = 0;
        
        int ipv4Cant = 0;
        int arpCant = 0;
        
        int icmpCant = 0;
        int igmpCant = 0;
        int tcpCant = 0;
        int udpCant = 0;
        
        int othersCant = 0;
        
        for(Paquete p: paquetesPrincipales){
            if (p.valorTipo() < 1500) {//IEEE
                ieeeCant++;
            } else {
                ethernetCant++;
                switch (p.valorTipo()) {
                    case (int) 2048: {
                        //IP
                        ipv4Cant++;
                        
                        IpV4 tramaIP = new IpV4();
                        tramaIP.analizaTrama(p.returnTrama());
                        
                        switch(tramaIP.returnProtocol()){
                            case (int)1: {
                                //ICMP
                                icmpCant++;
                                break;
                            }
                            case (int)2: {
                                //IGMP
                                igmpCant++;
                                break;
                            }
                            case (int)6: {
                                //TCP
                                tcpCant++;
                                break;
                            }
                            case (int)17: {
                                //UDP
                                udpCant++;
                                break;
                            }
                        }
                        
                        break;
                    }
                    case (int) 2054:{
                        //ARP
                        arpCant++;
                        break;
                    }
                    default: // Casos no contemplados
                        othersCant++;
                        break;
                }
            }
        }
        String estadisticas = "Total de paquetes capturados: "+packTotales+"\n"
                + "IEEE 802.3: "+ieeeCant+"\n"
                + "Ethernet: "+ethernetCant+"\n"
                + "    ARP: "+arpCant+"\n"
                + "    IPv4: "+ipv4Cant+"\n"
                + "        ICMP: "+icmpCant +"\n"
                + "        IGMP: "+igmpCant +"\n"
                + "        TCP: "+tcpCant +"\n"
                + "        UDP: "+udpCant +"\n"
                + "    Otros: "+othersCant;
        JOptionPane.showMessageDialog(this,
                estadisticas,
                "Estadísticas",
                JOptionPane.INFORMATION_MESSAGE);  
    }//GEN-LAST:event_estadisticaActionPerformed

    
    /*EJECUTA LA GUI*/
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
        
        
        /* CREA EL SNIFFER  */
        sniffer = new GetNextRawPacket();
        read = new ReadPacketFile();
    } 

    /*Son los botones, etiquetas, tabla, etc*/
    private static ReadPacketFile read;
    private static GetNextRawPacket sniffer;//Para poder capturar las tramas
    private static String filtroPaquetes;//Para guardar la cadena del filtro
    private static int cantidadCapturar;//Para guardar la cadena del filtro
    private static int tiempoCapturar;
    private static ArrayList<Paquete> paquetesPrincipales;//Paquetes de la aplicación principal
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutUs;
    private javax.swing.JMenuItem abrirArchivo;
    private javax.swing.JTextArea analisis;
    private javax.swing.JSpinner cantidadSpin;
    private javax.swing.JMenuItem cerrarArchivo;
    private javax.swing.JMenuItem equipo;
    private javax.swing.JMenuItem estadistica;
    private javax.swing.JLabel estatus;
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem guardaCap;
    private javax.swing.JMenuItem info;
    private javax.swing.JToggleButton inicioPausa;
    private javax.swing.JButton interfazSelec;
    private javax.swing.JMenuBar jBaraComun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox<String> opciones;
    private javax.swing.JScrollPane scrollAnalisis;
    private javax.swing.JSpinner tiempoSpin;
    private javax.swing.JMenu view;
    // End of variables declaration//GEN-END:variables
}
